package kr.co.lion.algorithm

//문제 설명
//과일 장수가 사과 상자를 포장하고 있습니다. 사과는 상태에 따라 1점부터 k점까지의 점수로 분류하며,
// k점이 최상품의 사과이고 1점이 최하품의 사과입니다. 사과 한 상자의 가격은 다음과 같이 결정됩니다.
//한 상자에 사과를 m개씩 담아 포장합니다.
//상자에 담긴 사과 중 가장 낮은 점수가 p (1 ≤ p ≤ k)점인 경우, 사과 한 상자의 가격은 p * m 입니다.
//과일 장수가 가능한 많은 사과를 팔았을 때, 얻을 수 있는 최대 이익을 계산하고자 합니다.(사과는 상자 단위로만 판매하며, 남는 사과는 버립니다)
//
//예를 들어, k = 3, m = 4, 사과 7개의 점수가 [1, 2, 3, 1, 2, 3, 1]이라면,
// 다음과 같이 [2, 3, 2, 3]으로 구성된 사과 상자 1개를 만들어 판매하여 최대 이익을 얻을 수 있습니다.
//(최저 사과 점수) x (한 상자에 담긴 사과 개수) x (상자의 개수) = 2 x 4 x 1 = 8
//사과의 최대 점수 k, 한 상자에 들어가는 사과의 수 m, 사과들의 점수 score가 주어졌을 때,
// 과일 장수가 얻을 수 있는 최대 이익을 return하는 solution 함수를 완성해주세요.
//
//제한사항
//3 ≤ k ≤ 9
//3 ≤ m ≤ 10
//7 ≤ score의 길이 ≤ 1,000,000
//1 ≤ score[i] ≤ k
//이익이 발생하지 않는 경우에는 0을 return 해주세요.

fun solution(k: Int, m: Int, score: IntArray): Int {
    // 사과 점수를 내림차순으로 정렬합니다.
    score.sortDescending()

    var profit = 0
    // m개씩 묶어서 박스를 만들 수 있는 경우에만 계산합니다.
    // 내림차순 정렬 후, 각 그룹의 마지막 값이 해당 그룹의 최소 점수가 됩니다.
    for (i in m - 1 until score.size step m) {
        profit += score[i] * m
    }

    return profit
}

fun main() {
    // 테스트 케이스 1
    // k = 3, m = 4, score = [1, 2, 3, 1, 2, 3, 1]
    // 내림차순 정렬 후: [3, 3, 2, 2, 1, 1, 1]
    // 첫 그룹: [3, 3, 2, 2] → 최소 2, 이익: 2 * 4 = 8
    // 남은 사과는 박스 구성이 안되므로 무시합니다.
    val k1 = 3
    val m1 = 4
    val score1 = intArrayOf(1, 2, 3, 1, 2, 3, 1)
    println("테스트 케이스 1: 예상 이익 = 8, 계산된 이익 = ${solution(k1, m1, score1)}")

    // 테스트 케이스 2
    // k = 4, m = 3, score = [4, 3, 2, 2, 1, 1, 1]
    // 내림차순 정렬 후: [4, 3, 2, 2, 1, 1, 1]
    // 그룹 1: [4, 3, 2] → 최소 2, 이익: 2 * 3 = 6
    // 그룹 2: [2, 1, 1] → 최소 1, 이익: 1 * 3 = 3
    // 남은 사과 [1]은 무시 → 총 이익 = 6 + 3 = 9
    val k2 = 4
    val m2 = 3
    val score2 = intArrayOf(4, 3, 2, 2, 1, 1, 1)
    println("테스트 케이스 2: 예상 이익 = 9, 계산된 이익 = ${solution(k2, m2, score2)}")

    // 테스트 케이스 3
    // m개 이상 채울 수 없는 경우, 이익은 0입니다.
    val k3 = 5
    val m3 = 3
    val score3 = intArrayOf(5, 4) // 2개밖에 없으므로 박스 구성 불가
    println("테스트 케이스 3: 예상 이익 = 0, 계산된 이익 = ${solution(k3, m3, score3)}")
}